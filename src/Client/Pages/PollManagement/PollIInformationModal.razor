@using VoteApp.Application.Features.Polls.Queries.GetById;
@using VoteApp.Client.Infrastructure.Managers.PollManagement

@if (selectedPoll != null)
{
    <MudCard>
        <MudCardHeader>
            <MudText>@selectedPoll.QuestionTitle</MudText>
            <MudText>Join code: @selectedPoll.JoinCode</MudText>          
        </MudCardHeader>
        <MudCardContent>
            <MudText>@selectedPoll.Question</MudText>
            <table>
                <tr>
                    <td>@selectedPoll.RedAnswer</td>
                    <td>@selectedPoll.VoteCount.RedVotes</td>
                </tr>
                <tr>
                    <td>@selectedPoll.GreenAnswer</td>
                    <td>@selectedPoll.VoteCount.GreenVotes</td>
                </tr>
            </table>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Error" OnClick="StopPoll">Stop poll</MudButton>
        </MudCardActions>
    </MudCard>
}


@code {

    [Inject] private IPollManager pollManager { get; set; }

    [Parameter] public int PollId { get; set; }
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }

    private GetPollByIdResponse selectedPoll;

    private void StopPoll()
    {
        pollManager.StopAsync(PollId);
    }

    protected override async Task OnInitializedAsync()
    {

        var result = await pollManager.GetByIdAsync(PollId);

        selectedPoll = result.Data;

    }
}
