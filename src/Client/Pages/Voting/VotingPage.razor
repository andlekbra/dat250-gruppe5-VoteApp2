@page "/voting"
@attribute [AllowAnonymous]
@using VoteApp.Client.Infrastructure.Managers.PollManagement;
@using VoteApp.Application.Features.Polls.Queries.GetByJoinCode;

<MudContainer>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudText Align="Align.Center" Typo="Typo.h2">VoteApp</MudText>
            <MudText Align="Align.Center" Typo="Typo.h5" Class="smaller">DAT250 Group 5</MudText>
        </MudItem>
        @if (ongoingPoll is not null)
        {

            <MudItem xs="6">
                <MudPaper Severity="Severity.Info">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Align="Align.Center" Typo="Typo.h2">@ongoingPoll.QuestionTitle</MudText>
                            <MudText Align="Align.Center" Typo="Typo.h5" Class="smaller">@ongoingPoll.Question</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Filled" FullWidth="true" Size="Size.Large" OnClick="OnRedVote">@ongoingPoll.RedAnswer</MudButton>
                        </MudItem>
                        <MudItem xs="6">
                            <MudButton Variant="Variant.Filled" FullWidth="true" Size="Size.Large" OnClick="OnGreenVote">@ongoingPoll.GreenAnswer</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

        }
        else
        {


            <MudPaper Elevation="1">
                <MudItem xs="8">
                    <MudTextField @bind-Value="joincode" Label="Join code" Variant="Variant.Filled"></MudTextField>
                </MudItem>
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" OnClick="joinPoll">Join Poll</MudButton>
                </MudItem>
            </MudPaper>


        }
    </MudGrid>
</MudContainer>


@code {
    [Inject] public IPollManager PollManager { get; set; }
    [Inject] public NavigationManager NavManager { get; set; }

    private string joincode;

    private GetOngoingPollByJoinCodeResponse ongoingPoll;

    private async void OnGreenVote()
    {
        var result = await PollManager.VoteOnPollByJoinCode(ongoingPoll.JoinCode, 1, 0);
        if (result.Succeeded)
        {
            _snackBar.Add("Vote for " + ongoingPoll.GreenAnswer + " received! Thank you for voting!", Severity.Success);
        }
        else
        {
            _snackBar.Add("Something went wrong. YOur vote was not registered");
        }
        ongoingPoll = null;
        StateHasChanged();
    }

    private async void OnRedVote()
    {
        var result = await PollManager.VoteOnPollByJoinCode(ongoingPoll.JoinCode, 0, 1);
        if (result.Succeeded)
        {
            _snackBar.Add("Vote for " + ongoingPoll.RedAnswer + " received! Thank you for voting!",Severity.Success);
        }
        else
        {
            _snackBar.Add("Something went wrong. YOur vote was not registered");
        }
        ongoingPoll = null;
        StateHasChanged();

    }

    private async void joinPoll()
    {
        if (string.IsNullOrEmpty(joincode))
        {
            _snackBar.Add("Join code cannot be empty", Severity.Error);
        }
        else
        {
            ongoingPoll = (await PollManager.GetOngoingPollByJoinCode(joincode)).Data;
            if (ongoingPoll == null)
            {
                _snackBar.Add("Poll with joincode " + joincode + " does not exist",Severity.Error);
            }
            StateHasChanged();
        }

        joincode = "";

    }
}
